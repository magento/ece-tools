diff -Nuar a/vendor/magento/module-inventory-indexer/Model/ResourceModel/GetStockItemData.php b/vendor/magento/module-inventory-indexer/Model/ResourceModel/GetStockItemData.php
--- a/vendor/magento/module-inventory-indexer/Model/ResourceModel/GetStockItemData.php
+++ b/vendor/magento/module-inventory-indexer/Model/ResourceModel/GetStockItemData.php
@@ -12,6 +12,8 @@
 use Magento\InventoryIndexer\Model\StockIndexTableNameResolverInterface;
 use Magento\InventorySalesApi\Model\GetStockItemDataInterface;
 use Magento\InventoryIndexer\Indexer\IndexStructure;
+use Magento\InventoryCatalogApi\Api\DefaultStockProviderInterface;
+use Magento\InventoryCatalogApi\Model\GetProductIdsBySkusInterface;

 /**
  * @inheritdoc
@@ -28,16 +30,32 @@ class GetStockItemData implements GetStockItemDataInterface
      */
     private $stockIndexTableNameResolver;

+    /**
+     * @var DefaultStockProviderInterface
+     */
+    private $defaultStockProvider;
+
+    /**
+     * @var GetProductIdsBySkusInterface
+     */
+    private $getProductIdsBySkus;
+
     /**
      * @param ResourceConnection $resource
      * @param StockIndexTableNameResolverInterface $stockIndexTableNameResolver
+     * @param DefaultStockProviderInterface $defaultStockProvider
+     * @param GetProductIdsBySkusInterface $getProductIdsBySkus
      */
     public function __construct(
         ResourceConnection $resource,
-        StockIndexTableNameResolverInterface $stockIndexTableNameResolver
+        StockIndexTableNameResolverInterface $stockIndexTableNameResolver,
+        DefaultStockProviderInterface $defaultStockProvider,
+        GetProductIdsBySkusInterface $getProductIdsBySkus
     ) {
         $this->resource = $resource;
         $this->stockIndexTableNameResolver = $stockIndexTableNameResolver;
+        $this->defaultStockProvider = $defaultStockProvider;
+        $this->getProductIdsBySkus = $getProductIdsBySkus;
     }

     /**
@@ -45,18 +63,29 @@ public function __construct(
      */
     public function execute(string $sku, int $stockId): ?array
     {
-        $stockItemTableName = $this->stockIndexTableNameResolver->execute($stockId);
-
         $connection = $this->resource->getConnection();
-        $select = $connection->select()
-            ->from(
+        $select = $connection->select();
+
+        if ($this->defaultStockProvider->getId() === $stockId) {
+            $productId = current($this->getProductIdsBySkus->execute([$sku]));
+            $stockItemTableName = $this->resource->getTableName('cataloginventory_stock_status');
+            $select->from(
+                $stockItemTableName,
+                [
+                    GetStockItemDataInterface::QUANTITY => 'qty',
+                    GetStockItemDataInterface::IS_SALABLE => 'stock_status',
+                ]
+            )->where('product_id = ?', $productId);
+        } else {
+            $stockItemTableName = $this->stockIndexTableNameResolver->execute($stockId);
+            $select->from(
                 $stockItemTableName,
                 [
                     GetStockItemDataInterface::QUANTITY => IndexStructure::QUANTITY,
                     GetStockItemDataInterface::IS_SALABLE => IndexStructure::IS_SALABLE,
                 ]
-            )
-            ->where(IndexStructure::SKU . ' = ?', $sku);
+            )->where(IndexStructure::SKU . ' = ?', $sku);
+        }

         try {
             if ($connection->isTableExists($stockItemTableName)) {
