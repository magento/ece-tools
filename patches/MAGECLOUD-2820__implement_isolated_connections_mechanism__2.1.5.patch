diff -Nuar a/dev/tests/integration/testsuite/Magento/Framework/DB/Adapter/Pdo/MysqlTest.php b/dev/tests/integration/testsuite/Magento/Framework/DB/Adapter/Pdo/MysqlTest.php
--- a/dev/tests/integration/testsuite/Magento/Framework/DB/Adapter/Pdo/MysqlTest.php
+++ b/dev/tests/integration/testsuite/Magento/Framework/DB/Adapter/Pdo/MysqlTest.php
@@ -1,34 +1,28 @@
 <?php
 /**
- * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * Copyright © Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-
-// @codingStandardsIgnoreFile
-
-/**
- * Test for an PDO MySQL adapter
- */
 namespace Magento\Framework\DB\Adapter\Pdo;
 
 use Magento\Framework\App\ResourceConnection;
-use Zend_Db_Statement_Exception;
+use Magento\TestFramework\Helper\Bootstrap;
 
 class MysqlTest extends \PHPUnit_Framework_TestCase
 {
     /**
-     * Database adapter instance
-     *
-     * @var \Magento\Framework\DB\Adapter\Pdo\Mysql
+     * @var ResourceConnection
      */
-    protected $_connection = null;
+    private $resourceConnection;
 
-    public function setUp()
+    protected function setUp()
     {
         set_error_handler(null);
+        $this->resourceConnection = Bootstrap::getObjectManager()
+            ->get(ResourceConnection::class);
     }
 
-    public function tearDown()
+    protected function tearDown()
     {
         restore_error_handler();
     }
@@ -40,30 +34,20 @@ class MysqlTest extends \PHPUnit_Framework_TestCase
      */
     public function testWaitTimeout()
     {
-        if (!$this->_getConnection() instanceof \Magento\Framework\DB\Adapter\Pdo\Mysql) {
+        if (!$this->getDbAdapter() instanceof \Magento\Framework\DB\Adapter\Pdo\Mysql) {
             $this->markTestSkipped('This test is for \Magento\Framework\DB\Adapter\Pdo\Mysql');
         }
         try {
-            $defaultWaitTimeout = $this->_getWaitTimeout();
             $minWaitTimeout = 1;
-            $this->_setWaitTimeout($minWaitTimeout);
-            $this->assertEquals($minWaitTimeout, $this->_getWaitTimeout(), 'Wait timeout was not changed');
+            $this->setWaitTimeout($minWaitTimeout);
+            $this->assertEquals($minWaitTimeout, $this->getWaitTimeout(), 'Wait timeout was not changed');
 
             // Sleep for time greater than wait_timeout and try to perform query
             sleep($minWaitTimeout + 1);
-            $result = $this->_executeQuery('SELECT 1');
-            $this->assertInstanceOf('Magento\Framework\DB\Statement\Pdo\Mysql', $result);
-            // Restore wait_timeout
-            $this->_setWaitTimeout($defaultWaitTimeout);
-            $this->assertEquals(
-                $defaultWaitTimeout,
-                $this->_getWaitTimeout(),
-                'Default wait timeout was not restored'
-            );
-        } catch (\Exception $e) {
-            // Reset connection on failure to restore global variables
-            $this->_getConnection()->closeConnection();
-            throw $e;
+            $result = $this->executeQuery('SELECT 1');
+            $this->assertInstanceOf(\Magento\Framework\DB\Statement\Pdo\Mysql::class, $result);
+        } finally {
+            $this->getDbAdapter()->closeConnection();
         }
     }
 
@@ -72,9 +56,9 @@ class MysqlTest extends \PHPUnit_Framework_TestCase
      *
      * @return int
      */
-    protected function _getWaitTimeout()
+    private function getWaitTimeout()
     {
-        $result = $this->_executeQuery('SELECT @@session.wait_timeout');
+        $result = $this->executeQuery('SELECT @@session.wait_timeout');
         return (int)$result->fetchColumn();
     }
 
@@ -83,39 +67,22 @@ class MysqlTest extends \PHPUnit_Framework_TestCase
      *
      * @param int $waitTimeout
      */
-    protected function _setWaitTimeout($waitTimeout)
+    private function setWaitTimeout($waitTimeout)
     {
-        $this->_executeQuery("SET @@session.wait_timeout = {$waitTimeout}");
+        $this->executeQuery("SET @@session.wait_timeout = {$waitTimeout}");
     }
 
     /**
      * Execute SQL query and return result statement instance
      *
-     * @param string $sql
-     * @return \Zend_Db_Statement_Interface
-     * @throws \Exception
+     * @param $sql
+     * @return void|\Zend_Db_Statement_Pdo
+     * @throws \Magento\Framework\Exception\LocalizedException
+     * @throws \Zend_Db_Adapter_Exception
      */
-    protected function _executeQuery($sql)
+    private function executeQuery($sql)
     {
-        /**
-         * Suppress PDO warnings to work around the bug
-         * @link https://bugs.php.net/bug.php?id=63812
-         */
-        $phpErrorReporting = error_reporting();
-        /** @var $pdoConnection \PDO */
-        $pdoConnection = $this->_getConnection()->getConnection();
-        $pdoWarningsEnabled = $pdoConnection->getAttribute(\PDO::ATTR_ERRMODE) & \PDO::ERRMODE_WARNING;
-        if (!$pdoWarningsEnabled) {
-            error_reporting($phpErrorReporting & ~E_WARNING);
-        }
-        try {
-            $result = $this->_getConnection()->query($sql);
-            error_reporting($phpErrorReporting);
-        } catch (\Exception $e) {
-            error_reporting($phpErrorReporting);
-            throw $e;
-        }
-        return $result;
+        return $this->getDbAdapter()->query($sql);
     }
 
     /**
@@ -123,14 +90,44 @@ class MysqlTest extends \PHPUnit_Framework_TestCase
      *
      * @return \Magento\Framework\DB\Adapter\Pdo\Mysql
      */
-    protected function _getConnection()
+    private function getDbAdapter()
     {
-        if (is_null($this->_connection)) {
-            /** @var $coreResource \Magento\Framework\App\ResourceConnection */
-            $coreResource = \Magento\TestFramework\Helper\Bootstrap::getObjectManager()
-                ->get('Magento\Framework\App\ResourceConnection');
-            $this->_connection = $coreResource->getConnection();
-        }
-        return $this->_connection;
+        return $this->resourceConnection->getConnection();
+    }
+
+    public function testGetCreateTable()
+    {
+        $tableName = $this->resourceConnection->getTableName('core_config_data');
+        $this->assertEquals(
+            $this->getDbAdapter()->getCreateTable($tableName),
+            $this->getDbAdapter()->getCreateTable($tableName)
+        );
+    }
+
+    public function testGetForeignKeys()
+    {
+        $tableName = $this->resourceConnection->getTableName('core_config_data');
+        $this->assertEquals(
+            $this->getDbAdapter()->getForeignKeys($tableName),
+            $this->getDbAdapter()->getForeignKeys($tableName)
+        );
+    }
+
+    public function testGetIndexList()
+    {
+        $tableName = $this->resourceConnection->getTableName('core_config_data');
+        $this->assertEquals(
+            $this->getDbAdapter()->getIndexList($tableName),
+            $this->getDbAdapter()->getIndexList($tableName)
+        );
+    }
+
+    public function testDescribeTable()
+    {
+        $tableName = $this->resourceConnection->getTableName('core_config_data');
+        $this->assertEquals(
+            $this->getDbAdapter()->describeTable($tableName),
+            $this->getDbAdapter()->describeTable($tableName)
+        );
     }
 }
diff -Nuar a/vendor/magento/framework/DB/Statement/Pdo/Mysql.php b/vendor/magento/framework/DB/Statement/Pdo/Mysql.php
--- a/vendor/magento/framework/DB/Statement/Pdo/Mysql.php
+++ b/vendor/magento/framework/DB/Statement/Pdo/Mysql.php
@@ -1,25 +1,22 @@
 <?php
 /**
- * Copyright © 2013-2017 Magento, Inc. All rights reserved.
+ * Copyright © Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
+namespace Magento\Framework\DB\Statement\Pdo;
 
-// @codingStandardsIgnoreFile
+use Magento\Framework\DB\Statement\Parameter;
 
 /**
  * Mysql DB Statement
  *
  * @author      Magento Core Team <core@magentocommerce.com>
  */
-namespace Magento\Framework\DB\Statement\Pdo;
-
-use Magento\Framework\DB\Statement\Parameter;
-
 class Mysql extends \Zend_Db_Statement_Pdo
 {
+
     /**
-     * Executes statement with binding values to it.
-     * Allows transferring specific options to DB driver.
+     * Executes statement with binding values to it. Allows transferring specific options to DB driver.
      *
      * @param array $params Array of values to bind to parameter placeholders.
      * @return bool
@@ -63,11 +60,9 @@ class Mysql extends \Zend_Db_Statement_Pdo
             $statement->bindParam($paramName, $bindValues[$name], $dataType, $length, $driverOptions);
         }
 
-        try {
+        return $this->tryExecute(function () use ($statement) {
             return $statement->execute();
-        } catch (\PDOException $e) {
-            throw new \Zend_Db_Statement_Exception($e->getMessage(), (int)$e->getCode(), $e);
-        }
+        });
     }
 
     /**
@@ -92,7 +87,29 @@ class Mysql extends \Zend_Db_Statement_Pdo
         if ($specialExecute) {
             return $this->_executeWithBinding($params);
         } else {
-            return parent::_execute($params);
+            return $this->tryExecute(function () use ($params) {
+                return $params !== null ? $this->_stmt->execute($params) : $this->_stmt->execute();
+            });
+        }
+    }
+
+    /**
+     * Executes query and avoid warnings.
+     *
+     * @param callable $callback
+     * @return bool
+     * @throws \Zend_Db_Statement_Exception
+     */
+    private function tryExecute($callback)
+    {
+        $previousLevel = error_reporting(\E_ERROR); // disable warnings for PDO bugs #63812, #74401
+        try {
+            return $callback();
+        } catch (\PDOException $e) {
+            $message = sprintf('%s, query was: %s', $e->getMessage(), $this->_stmt->queryString);
+            throw new \Zend_Db_Statement_Exception($message, (int)$e->getCode(), $e);
+        } finally {
+            error_reporting($previousLevel);
         }
     }
 }
diff -Nuar a/vendor/magento/framework/DB/Test/Unit/DB/Statement/MysqlTest.php b/vendor/magento/framework/DB/Test/Unit/DB/Statement/MysqlTest.php
new file mode 100644
--- /dev/null
+++ b/vendor/magento/framework/DB/Test/Unit/DB/Statement/MysqlTest.php
@@ -0,0 +1,159 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+namespace Magento\Framework\DB\Test\Unit\DB\Statement;
+
+use Magento\Framework\DB\Statement\Parameter;
+use Magento\Framework\DB\Statement\Pdo\Mysql;
+use PHPUnit_Framework_MockObject_MockObject as MockObject;
+
+/**
+ * @inheritdoc
+ */
+class MysqlTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @var \Zend_Db_Adapter_Abstract|MockObject
+     */
+    private $adapterMock;
+
+    /**
+     * @var \PDO|MockObject
+     */
+    private $pdoMock;
+
+    /**
+     * @var \Zend_Db_Profiler|MockObject
+     */
+    private $zendDbProfilerMock;
+
+    /**
+     * @var \PDOStatement|MockObject
+     */
+    private $pdoStatementMock;
+
+    /**
+     * @inheritdoc
+     */
+    public function setUp()
+    {
+        $this->adapterMock = $this->getMockForAbstractClass(
+            \Zend_Db_Adapter_Abstract::class,
+            [],
+            '',
+            false,
+            true,
+            true,
+            ['getConnection', 'getProfiler']
+        );
+        $this->pdoMock = $this->getMockBuilder(\PDO::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+        $this->adapterMock->expects($this->once())
+            ->method('getConnection')
+            ->willReturn($this->pdoMock);
+        $this->zendDbProfilerMock = $this->getMockBuilder(\Zend_Db_Profiler::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+        $this->adapterMock->expects($this->once())
+            ->method('getProfiler')
+            ->willReturn($this->zendDbProfilerMock);
+        $this->pdoStatementMock = $this->getMockBuilder(\PDOStatement::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+    }
+
+    public function testExecuteWithoutParams()
+    {
+        $query = 'SET @a=1;';
+        $this->pdoMock->expects($this->once())
+            ->method('prepare')
+            ->with($query)
+            ->willReturn($this->pdoStatementMock);
+        $this->pdoStatementMock->expects($this->once())
+            ->method('execute');
+        (new Mysql($this->adapterMock, $query))->_execute();
+    }
+
+    public function testExecuteWhenThrowPDOException()
+    {
+        $this->setExpectedException(\Zend_Db_Statement_Exception::class, 'test message, query was:');
+        $errorReporting = error_reporting();
+        $query = 'SET @a=1;';
+        $this->pdoMock->expects($this->once())
+            ->method('prepare')
+            ->with($query)
+            ->willReturn($this->pdoStatementMock);
+        $this->pdoStatementMock->expects($this->once())
+            ->method('execute')
+            ->willThrowException(new \PDOException('test message'));
+
+        $this->assertEquals($errorReporting, error_reporting(), 'Error report level was\'t restored');
+
+        (new Mysql($this->adapterMock, $query))->_execute();
+    }
+
+    public function testExecuteWhenParamsAsPrimitives()
+    {
+        $params = [':param1' => 'value1', ':param2' => 'value2'];
+        $query = 'UPDATE `some_table1` SET `col1`=\'val1\' WHERE `param1`=\':param1\' AND `param2`=\':param2\';';
+        $this->pdoMock->expects($this->once())
+            ->method('prepare')
+            ->with($query)
+            ->willReturn($this->pdoStatementMock);
+        $this->pdoStatementMock->expects($this->never())
+            ->method('bindParam');
+        $this->pdoStatementMock->expects($this->once())
+            ->method('execute')
+            ->with($params);
+
+        (new Mysql($this->adapterMock, $query))->_execute($params);
+    }
+
+    public function testExecuteWhenParamsAsParameterObject()
+    {
+        $param1 = $this->getMockBuilder(Parameter::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+        $param1Value = 'SomeValue';
+        $param1DataType = 'dataType';
+        $param1Length = '9';
+        $param1DriverOptions = 'some driver options';
+        $param1->expects($this->once())
+            ->method('getIsBlob')
+            ->willReturn(false);
+        $param1->expects($this->once())
+            ->method('getDataType')
+            ->willReturn($param1DataType);
+        $param1->expects($this->once())
+            ->method('getLength')
+            ->willReturn($param1Length);
+        $param1->expects($this->once())
+            ->method('getDriverOptions')
+            ->willReturn($param1DriverOptions);
+        $param1->expects($this->once())
+            ->method('getValue')
+            ->willReturn($param1Value);
+        $params = [
+            ':param1' => $param1,
+            ':param2' => 'value2',
+        ];
+        $query = 'UPDATE `some_table1` SET `col1`=\'val1\' WHERE `param1`=\':param1\' AND `param2`=\':param2\';';
+        $this->pdoMock->expects($this->once())
+            ->method('prepare')
+            ->with($query)
+            ->willReturn($this->pdoStatementMock);
+        $this->pdoStatementMock->expects($this->exactly(2))
+            ->method('bindParam')
+            ->withConsecutive(
+                [':param1', $param1Value, $param1DataType, $param1Length, $param1DriverOptions],
+                [':param2', 'value2', \PDO::PARAM_STR, null, null]
+            );
+        $this->pdoStatementMock->expects($this->once())
+            ->method('execute');
+
+        (new Mysql($this->adapterMock, $query))->_execute($params);
+    }
+}
